import ccxt
import pandas as pd
import requests
import os
import time
import json # ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®: ‡¶á‡¶®‡ßç‡¶°‡¶ø‡¶ï‡ßá‡¶ü‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶ì ‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ---

# GitHub Secrets ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')

MA_PERIOD = 50           # OBV Moving Average (EMA) ‡¶™‡¶ø‡¶∞‡¶ø‡ßü‡¶°
ADX_PERIOD = 14          # ADX ‡¶ó‡¶£‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶ø‡¶∞‡¶ø‡ßü‡¶°
ADX_THRESHOLD = 25       # ADX ‡¶è‡¶á ‡¶Æ‡¶æ‡¶®‡ßá‡¶∞ ‡¶â‡¶™‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶§‡¶¨‡ßá‡¶á ‡¶∏‡¶ø‡¶ó‡¶®‡¶æ‡¶≤ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶¨‡ßá
PRE_CROSS_THRESHOLD = 0.001 # Pre-Cross ‡¶è‡¶∞ ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨ (0.1% ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨)

SYMBOL_PAIRS = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT']
TIMEFRAMES = ['15m', '30m', '1h'] 

# ----------------------------------------------------

def send_telegram_message(title, body):
    """Telegram Bot ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü"""
    
    # DEBUG: ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ, ‡¶§‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        # ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø GitHub Actions ‡¶≤‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü ‡¶≤‡ßã‡¶° ‡¶®‡¶æ ‡¶π‡ßü
        print("üî¥ ERROR: Telegram ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü‡•§")
        return

    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶¨‡¶°‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    message_text = f"*{title}*\n\n{body}" # ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ‡¶ü‡¶ø‡¶ï‡ßá ‡¶¨‡ßã‡¶≤‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã

    # Telegram API Endpoint
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    params = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message_text,
        "parse_mode": "Markdown", # Markdown ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        "disable_web_page_preview": True
    }

    try:
        # Telegram API call
        response = requests.post(url, data=params, timeout=10)
        
        if response.status_code == 200:
            print(f"‚úÖ Telegram ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá: {title}")
        else:
            # API ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            error_details = response.json()
            print(f"‚ùå Telegram API ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° {response.status_code} - ‡¶¨‡¶°‡¶ø: {json.dumps(error_details, indent=2)}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Telegram ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")

# Pushbullet ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø Telegram ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá 
send_pushbullet_notification = send_telegram_message


def calculate_obv_ma(dataframe):
    """OBV ‡¶è‡¶¨‡¶Ç 50 ‡¶™‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶°‡ßá‡¶∞ EMA ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßá"""
    obv = [0] * len(dataframe)
    for i in range(1, len(dataframe)):
        volume = dataframe['volume'].iloc[i]
        close = dataframe['close'].iloc[i]
        prev_close = dataframe['close'].iloc[i-1]

        if close > prev_close:
            obv[i] = obv[i-1] + volume
        elif close < prev_close:
            obv[i] = obv[i-1] - volume
        else:
            obv[i] = obv[i-1]
    
    dataframe['OBV'] = obv
    dataframe[f'MA_OBV_{MA_PERIOD}'] = dataframe['OBV'].ewm(span=MA_PERIOD, adjust=False).mean()
    return dataframe

def calculate_adx(dataframe, period=ADX_PERIOD):
    """
    ADX ‡¶á‡¶®‡ßç‡¶°‡¶ø‡¶ï‡ßá‡¶ü‡¶∞ ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡•§
    """
    
    # True Range (TR)
    tr1 = dataframe['high'] - dataframe['low']
    tr2 = abs(dataframe['high'] - dataframe['close'].shift(1))
    tr3 = abs(dataframe['low'] - dataframe['close'].shift(1))
    dataframe['TR'] = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)

    # Directional Movement (+DM and -DM)
    dataframe['+DM'] = dataframe['high'] - dataframe['high'].shift(1)
    dataframe['-DM'] = dataframe['low'].shift(1) - dataframe['low']
    
    dataframe['+DM'] = dataframe.apply(
        lambda row: row['+DM'] if row['+DM'] > row['-DM'] and row['+DM'] > 0 else 0, axis=1
    )
    dataframe['-DM'] = dataframe.apply(
        lambda row: row['-DM'] if row['-DM'] > row['+DM'] and row['-DM'] > 0 else 0, axis=1
    )

    # Smoothed TR, +DM, -DM (Wilder's smoothing)
    alpha = 1 / period
    dataframe['ATR'] = dataframe['TR'].ewm(alpha=alpha, adjust=False).mean()
    dataframe['+DI'] = (dataframe['+DM'].ewm(alpha=alpha, adjust=False).mean() / dataframe['ATR']) * 100
    dataframe['-DI'] = (dataframe['-DM'].ewm(alpha=alpha, adjust=False).mean() / dataframe['ATR']) * 100

    # Directional Index (DX) and ADX
    dataframe['DX'] = (abs(dataframe['+DI'] - dataframe['-DI']) / (dataframe['+DI'] + dataframe['-DI'])) * 100
    dataframe['ADX'] = dataframe['DX'].ewm(alpha=alpha, adjust=False).mean()

    return dataframe

def check_crossover(df, symbol, timeframe, exchange_name):
    """
    OBV/MA ‡¶ï‡ßç‡¶∞‡¶∏‡¶ì‡¶≠‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ADX ‡¶¶‡¶ø‡ßü‡ßá ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
    """
        
    if len(df) < (ADX_PERIOD * 2):
        return False
        
    last = df.iloc[-1]
    prev = df.iloc[-2]
    
    obv_value = last['OBV']
    ma_value = last[f'MA_OBV_{MA_PERIOD}'] 
    adx_value = last['ADX']
    
    alert_title_base = f"[{symbol} - {timeframe} ({exchange_name})]"
    
    # Hard Crossover (OBV/MA ‡¶ï‡ßç‡¶∞‡¶∏)
    is_bullish_cross = (prev['OBV'] < prev[f'MA_OBV_{MA_PERIOD}'] and obv_value > ma_value)
    is_bearish_cross = (prev['OBV'] > prev[f'MA_OBV_{MA_PERIOD}'] and obv_value < ma_value)
    
    # ADX ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï
    is_strong_trend = (adx_value >= ADX_THRESHOLD)

    # A. HIGH-QUALITY SIGNAL (OBV/MA ‡¶ï‡ßç‡¶∞‡¶∏ AND ADX > 25)
    if (is_bullish_cross or is_bearish_cross) and is_strong_trend:
        action = "BUY" if is_bullish_cross else "SELL"
        signal_type = "Bullish" if is_bullish_cross else "Bearish"

        alert_body = (
            f"üî•üî•üî• *HIGH CONFIRMATION SIGNAL* (*{action}*)! üî•üî•üî•\n"
            f"OBV/MA Cross: {signal_type} ‡¶™‡ßç‡¶∞‡¶¨‡¶£‡¶§‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§‡•§\n"
            f"ADX Confirmation: ADX = *{adx_value:,.2f}* (>{ADX_THRESHOLD})"
        )
        send_pushbullet_notification(f"üåü HIGH QUALITY {action} {alert_title_base}", alert_body)
        return True

    # B. REGULAR OBV/MA Crossover (ADX ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶õ‡¶æ‡ßú‡¶æ)
    elif (is_bullish_cross or is_bearish_cross) and not is_strong_trend:
        action = "BUY" if is_bullish_cross else "SELL"
        alert_body = (
            f"üéØ *REGULAR {action} Crossover* (‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®, ADX ‡¶¶‡ßÅ‡¶∞‡ßç‡¶¨‡¶≤!)\n"
            f"OBV:{obv_value:,.2f}, MA({MA_PERIOD}):{ma_value:,.2f}\n"
            f"ADX: *{adx_value:,.2f}*"
        )
        send_pushbullet_notification(f"üéØ REGULAR {action} {alert_title_base}", alert_body)
        return True
        
    # C. Pre-Cross (‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ) ‡¶≤‡¶ú‡¶ø‡¶ï: ADX ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßç‡¶∞‡¶Ø‡ßã‡¶ú‡ßç‡¶Ø ‡¶®‡ßü
    if abs(ma_value) > 1: 
        difference = abs(obv_value - ma_value)
        # ‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨ ‡¶ó‡¶£‡¶®‡¶æ 
        distance_percent = difference / abs(ma_value)
        
        if distance_percent <= PRE_CROSS_THRESHOLD:
            alert_body = (
                f"‚ö†Ô∏è *Pre-Cross Warning*: OBV MA({MA_PERIOD})-‡¶è‡¶∞ ‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø!\n"
                f"‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨: *{distance_percent:.2%}*\n" # ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨ ‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã
                f"OBV:{obv_value:,.2f}, MA({MA_PERIOD}):{ma_value:,.2f}"
            )
            send_pushbullet_notification(f"‚ö†Ô∏è PRE-CROSS {alert_title_base}", alert_body)
            return True
        
    return False

def main():
    
    EXCHANGES_TO_CHECK = [
        ccxt.mexc(),    
        ccxt.kucoin(), 
    ]
    
    print(f"‡¶ü‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ç ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶∏: {SYMBOL_PAIRS}, ‡¶ü‡¶æ‡¶á‡¶Æ‡¶´‡ßç‡¶∞‡ßá‡¶Æ: {TIMEFRAMES}")
    
    for exchange in EXCHANGES_TO_CHECK:
        exchange_name = exchange.id
        print(f"\n--- {exchange_name.upper()} ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ---")
        
        try:
            
            for symbol in SYMBOL_PAIRS:
                for tf in TIMEFRAMES:
                    try:
                        # 200‡¶ü‡¶ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ADX ‡¶è‡¶¨‡¶Ç OBV ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
                        ohlcv = exchange.fetch_ohlcv(symbol, tf, limit=200) 
                        
                        if not ohlcv:
                            print(f"‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡ßá‡¶á: {symbol} {tf} ({exchange_name})")
                            continue
                            
                        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                        
                        df = calculate_obv_ma(df)
                        df = calculate_adx(df) 
                        
                        df.dropna(inplace=True) 
                        
                        if len(df) < (ADX_PERIOD * 2):
                            continue
                            
                        check_crossover(df, symbol, tf, exchange_name.upper()) 
                        
                        # API Rate Limit ‡¶è‡¶°‡¶º‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∞‡¶§‡¶ø
                        time.sleep(0.5) 
                        
                    except Exception as e:
                        print(f"‚ùå ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶¨‡¶æ API ‡¶ï‡¶≤ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({symbol} {tf} - {exchange_name.upper()}): {e}")

        except Exception as e:
            print(f"‚ùå ‡¶è‡¶ï‡ßç‡¶∏‡¶ö‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({exchange_name.upper()}): {e}")
            continue 
            
if __name__ == "__main__":
    main()
