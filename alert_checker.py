import ccxt
import pandas as pd
import requests
import os
import time

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®: ‡¶á‡¶®‡ßç‡¶°‡¶ø‡¶ï‡ßá‡¶ü‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶ì ‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ---
PUSHBULLET_TOKEN = os.environ.get('PUSHBULLET_TOKEN')
MA_PERIOD = 30           # OBV Moving Average (EMA) ‡¶™‡¶ø‡¶∞‡¶ø‡ßü‡¶°
# ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶∏ ‡¶è‡¶á ‡¶≤‡ßá‡¶≠‡ßá‡¶≤‡ßá‡¶∞ ‡¶ï‡¶§ ‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂ ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ü ‡¶¶‡ßá‡¶¨‡ßá (0.005 = 0.5%)
SR_PROXIMITY_PERCENT = 0.005 

SYMBOL_PAIRS = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT']
TIMEFRAMES = ['5m', '15m', '30m', '1h'] 
# ----------------------------------------------------

def send_pushbullet_notification(title, body):
    """Pushbullet ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü"""
    if not PUSHBULLET_TOKEN:
        print("Pushbullet ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü‡•§")
        return

    url = "https://api.pushbullet.com/v2/pushes"
    headers = {
        "Access-Token": PUSHBULLET_TOKEN,
        "Content-Type": "application/json"
    }
    data = {
        "type": "note",
        "title": title,
        "body": body
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        if response.status_code == 200:
            print(f"Pushbullet ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá: {title}")
        else:
            print(f"Pushbullet ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° {response.status_code} - ‡¶¨‡¶°‡¶ø: {response.text}")
    except Exception as e:
        print(f"Pushbullet ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")

def calculate_obv_ma(dataframe):
    """OBV ‡¶è‡¶¨‡¶Ç ‡ß©‡ß¶ ‡¶™‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶°‡ßá‡¶∞ Exponential Moving Average (EMA) ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßá"""
    obv = [0] * len(dataframe)
    for i in range(1, len(dataframe)):
        volume = dataframe['volume'].iloc[i]
        close = dataframe['close'].iloc[i]
        prev_close = dataframe['close'].iloc[i-1]

        if close > prev_close:
            obv[i] = obv[i-1] + volume
        elif close < prev_close:
            obv[i] = obv[i-1] - volume
        else:
            obv[i] = obv[i-1]
    
    dataframe['OBV'] = obv
    dataframe['MA_OBV_30'] = dataframe['OBV'].ewm(span=MA_PERIOD, adjust=False).mean()
    return dataframe

def calculate_pivot_points(df):
    """Traditional Pivot Points ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßá"""
    
    # Pivot Points ‡¶ó‡¶£‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∂‡ßá‡¶∑ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡ßá‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü (C-2) 
    # ‡¶ï‡¶æ‡¶∞‡¶£ C-1 (‡¶∂‡ßá‡¶∑ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤) ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ì‡¶™‡ßá‡¶® ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ 
    # ‡¶Ø‡¶¶‡¶ø‡¶ì OHLCV ‡¶°‡ßá‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡ßã‡¶ú‡¶° ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ü‡¶∏‡ßá, ‡¶§‡¶¨‡ßÅ‡¶ì ‡¶ü‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶∂‡¶®‡¶æ‡¶≤ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø C-2 ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§
    if len(df) < 2:
        return None
        
    prev_candle = df.iloc[-2]
    H = prev_candle['high']
    L = prev_candle['low']
    C = prev_candle['close']
    
    # Pivot Point (PP)
    PP = (H + L + C) / 3
    
    # Resistance Levels (R)
    R1 = (2 * PP) - L
    R2 = PP + (H - L)
    R3 = H + 2 * (PP - L)

    # Support Levels (S)
    S1 = (2 * PP) - H
    S2 = PP - (H - L)
    S3 = L - 2 * (H - PP)
    
    # PP ‡¶ì R3/S3 ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶ï‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡ßü, ‡¶Ü‡¶Æ‡¶∞‡¶æ R1, R2, S1, S2 ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡•§
    return [S1, S2, R1, R2] 

def is_near_sr(current_close, sr_levels):
    """‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ Pivot Points ‡¶≤‡ßá‡¶≠‡ßá‡¶≤‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá"""
    if not sr_levels:
        return None, None 
    
    for level in sr_levels:
        if abs(current_close - level) / level <= SR_PROXIMITY_PERCENT:
            sr_type = "Support" if current_close > level else "Resistance"
            return level, sr_type
            
    return None, None

def check_candlestick_patterns(df, sr_level, sr_type):
    """
    S/R ‡¶≤‡ßá‡¶≠‡ßá‡¶≤‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï Candlestick Pattern ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá‡•§
    """
    if len(df) < 2:
        return None, None 

    c1 = df.iloc[-1]
    c2 = df.iloc[-2]

    body_c1 = abs(c1['close'] - c1['open'])
    c1_range = c1['high'] - c1['low']
    
    DOJI_THRESHOLD = 0.1
    SHADOW_RATIO = 2.0 
    
    # ------------------- 1. ENGULFING PATTERNS (2-Candle) -------------------
    body_c2 = abs(c2['close'] - c2['open'])
    if body_c1 > 0 and body_c2 > 0:
        
        # Bullish Engulfing (‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá)
        if (sr_type == "Support" and c2['close'] < c2['open'] and c1['close'] > c1['open'] and
            c1['close'] >= c2['open'] and c1['open'] <= c2['close']):
            return "BULLISH ENGULFING", "Bullish"

        # Bearish Engulfing (‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡ßá)
        elif (sr_type == "Resistance" and c2['close'] > c2['open'] and c1['close'] < c1['open'] and
              c1['open'] >= c2['close'] and c1['close'] <= c2['open']):
            return "BEARISH ENGULFING", "Bearish"

    # ------------------- 2. HAMMER / HANGING MAN (1-Candle) -------------------
    lower_shadow = min(c1['open'], c1['close']) - c1['low']
    upper_shadow = c1['high'] - max(c1['open'], c1['close'])
    
    # Hammer (‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá ‡¶¨‡ßÅ‡¶≤‡¶ø‡¶∂ ‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶æ‡¶≤)
    if (sr_type == "Support" and body_c1 > 0 and 
        lower_shadow >= body_c1 * SHADOW_RATIO and upper_shadow < body_c1):
        return "BULLISH HAMMER", "Bullish"

    # Hanging Man (‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡ßá ‡¶¨‡ßá‡ßü‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶æ‡¶≤)
    elif (sr_type == "Resistance" and body_c1 > 0 and 
          lower_shadow >= body_c1 * SHADOW_RATIO and upper_shadow < body_c1):
        return "BEARISH HANGING MAN", "Bearish"

    # ------------------- 3. DOJI (1-Candle) -------------------
    if body_c1 < c1_range * DOJI_THRESHOLD:
        return "DOJI STAR (Indecision)", "Indecision"

    return None, None 

def check_crossover(df, symbol, timeframe, exchange_name):
    """
    Pivot Points, Candlestick ‡¶è‡¶¨‡¶Ç OBV/MA ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶®‡ßç‡¶¨‡ßü‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá‡•§
    """
    
    if len(df) < 2:
        return False
        
    last = df.iloc[-1]
    prev = df.iloc[-2]
    current_close = last['close']
    
    # 1. OBV/MA Crossover Check 
    PRE_CROSS_THRESHOLD = 0.001 
    obv_value = last['OBV']
    ma_value = last['MA_OBV_30']
    
    # Hard Crossover 
    is_bullish_cross = (prev['OBV'] < prev['MA_OBV_30'] and obv_value > ma_value)
    is_bearish_cross = (prev['OBV'] > prev['MA_OBV_30'] and obv_value < ma_value)
    
    # Pre-Cross Logic
    is_pre_cross = False
    if abs(ma_value) > 1:
        difference = abs(obv_value - ma_value)
        distance_percent = difference / abs(ma_value)
        if distance_percent <= PRE_CROSS_THRESHOLD:
            is_pre_cross = True
            
    # 2. Pivot Points and Candlestick Check (‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º S/R ‡¶≤‡ßá‡¶≠‡ßá‡¶≤)
    sr_levels = calculate_pivot_points(df) # Pivot Points ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    sr_level, sr_type = is_near_sr(current_close, sr_levels)
    pattern_name, pattern_signal = None, None
    
    if sr_level is not None:
        pattern_name, pattern_signal = check_candlestick_patterns(df, sr_level, sr_type)
        
    # --- ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡ßç‡¶ü ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
    alert_title_base = f"[{symbol} - {timeframe} ({exchange_name})]"
    
    # A. HIGH CONVICTION SIGNAL (OBV/MA + S/R/Candle)
    if (is_bullish_cross and pattern_signal == "Bullish") or \
       (is_bearish_cross and pattern_signal == "Bearish"):
        
        signal_type = "BUY" if is_bullish_cross else "SELL"
        
        alert_body = (
            f"üî•üî•üî• HIGH CONFIRMATION ENTRY ({signal_type})! üî•üî•üî•\n"
            f"1. OBV/MA Cross: ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶¨‡¶£‡¶§‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡•§\n"
            f"2. Pivot Reversal: **{pattern_name}** ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá {sr_type} ({sr_level:,.2f})-‡¶è‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá‡•§"
        )
        send_pushbullet_notification(f"üåü PIVOT & OBV CONFIRMATION ({signal_type}) {alert_title_base}", alert_body)
        return True
    
    # B. PIVOT Reversal Alert (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ Pivot Points ‡¶è‡¶¨‡¶Ç Candlestick, ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßç‡¶∞‡¶∏ ‡¶®‡ßá‡¶á)
    elif pattern_name is not None:
        
        if "DOJI" in pattern_name:
            alert_priority = "‚ö†Ô∏è PIVOT INDECISION"
        else:
            alert_priority = "‚ö†Ô∏è PIVOT REVERSAL"
        
        alert_body = (
            f"**{pattern_name}** ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá!\n"
            f"Candle Pattern: ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá {sr_type} ({sr_level:,.2f})-‡¶è‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá‡•§\n"
            f"OBV/MA ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®: {obv_value:,.2f} / {ma_value:,.2f}‡•§"
        )
        send_pushbullet_notification(f"{alert_priority} {alert_title_base}", alert_body)
        return True
        
    # C. REGULAR OBV/MA Crossover 
    elif is_bullish_cross or is_bearish_cross:
        action = "BUY" if is_bullish_cross else "SELL"
        alert_body = f"üöÄ {action} Crossover! OBV:{obv_value:,.2f}, MA:{ma_value:,.2f}"
        send_pushbullet_notification(f"üéØ REGULAR {action} {alert_title_base}", alert_body)
        return True

    # D. Pre-Cross Alert 
    elif is_pre_cross:
        alert_body = (
            f"‚ö†Ô∏è Pre-Cross Warning: OBV MA-‡¶è‡¶∞ ‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø! ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨: {distance_percent:.2%}\n"
            f"OBV:{obv_value:,.2f}, MA:{ma_value:,.2f}"
        )
        send_pushbullet_notification(f"‚ö†Ô∏è PRE-CROSS {alert_title_base}", alert_body)
        return True
        
    return False

def main():
    
    EXCHANGES_TO_CHECK = [
        ccxt.mexc(),    
        ccxt.kucoin(), 
    ]
    
    print(f"‡¶ü‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ç ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶∏: {SYMBOL_PAIRS}, ‡¶ü‡¶æ‡¶á‡¶Æ‡¶´‡ßç‡¶∞‡ßá‡¶Æ: {TIMEFRAMES}")
    
    for exchange in EXCHANGES_TO_CHECK:
        exchange_name = exchange.id
        print(f"\n--- {exchange_name.upper()} ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ---")
        
        try:
            for symbol in SYMBOL_PAIRS:
                for tf in TIMEFRAMES:
                    try:
                        # 200‡¶ü‡¶ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                        ohlcv = exchange.fetch_ohlcv(symbol, tf, limit=200) 
                        
                        if not ohlcv:
                            print(f"‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡ßá‡¶á: {symbol} {tf} ({exchange_name})")
                            continue
                            
                        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                        
                        df = calculate_obv_ma(df)
                        df.dropna(inplace=True) 
                        
                        if len(df) < 2:
                            continue
                            
                        check_crossover(df, symbol, tf, exchange_name.upper()) 
                        
                        time.sleep(0.5) 
                        
                    except Exception as e:
                        print(f"‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶¨‡¶æ API ‡¶ï‡¶≤ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({symbol} {tf} - {exchange_name.upper()}): {e}")

        except Exception as e:
            print(f"‡¶è‡¶ï‡ßç‡¶∏‡¶ö‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({exchange_name.upper()}): {e}")
            continue 
            
if __name__ == "__main__":
    main()
