import ccxt
import pandas as pd
import requests
import os
import time

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®: ‡¶á‡¶®‡ßç‡¶°‡¶ø‡¶ï‡ßá‡¶ü‡¶∞ ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞ ‡¶ì ‡¶ü‡ßç‡¶∞‡ßá‡¶° ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ---
PUSHBULLET_TOKEN = os.environ.get('PUSHBULLET_TOKEN')
MA_PERIOD = 30           # OBV Moving Average (EMA) ‡¶™‡¶ø‡¶∞‡¶ø‡ßü‡¶° (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡ßá 30 ‡¶è ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶≤‡ßã)
SYMBOL_PAIRS = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT']

# **‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:** 5 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶´‡ßç‡¶∞‡ßá‡¶Æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
TIMEFRAMES = ['15m', '30m', '1h'] 
# ----------------------------------------------------

def send_pushbullet_notification(title, body):
    """Pushbullet ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü"""
    if not PUSHBULLET_TOKEN:
        print("Pushbullet ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü‡•§")
        return

    url = "https://api.pushbullet.com/v2/pushes"
    headers = {
        "Access-Token": PUSHBULLET_TOKEN,
        "Content-Type": "application/json"
    }
    data = {
        "type": "note",
        "title": title,
        "body": body
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        if response.status_code == 200:
            print(f"Pushbullet ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá: {title}")
        else:
            print(f"Pushbullet ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° {response.status_code} - ‡¶¨‡¶°‡¶ø: {response.text}")
    except Exception as e:
        print(f"Pushbullet ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")

def calculate_obv_ma(dataframe):
    """OBV ‡¶è‡¶¨‡¶Ç ‡ß©‡ß¶ ‡¶™‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡¶°‡ßá‡¶∞ Exponential Moving Average (EMA) ‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßá"""
    obv = [0] * len(dataframe)
    for i in range(1, len(dataframe)):
        volume = dataframe['volume'].iloc[i]
        close = dataframe['close'].iloc[i]
        prev_close = dataframe['close'].iloc[i-1]

        if close > prev_close:
            obv[i] = obv[i-1] + volume
        elif close < prev_close:
            obv[i] = obv[i-1] - volume
        else:
            obv[i] = obv[i-1]
    
    dataframe['OBV'] = obv
    # EMA ‡¶ó‡¶£‡¶®‡¶æ
    dataframe['MA_OBV_30'] = dataframe['OBV'].ewm(span=MA_PERIOD, adjust=False).mean()
    
    # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶≤‡¶æ‡¶Æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
    columns_to_keep = ['timestamp', 'open', 'high', 'low', 'close', 'volume', 'OBV', 'MA_OBV_30']
    return dataframe[columns_to_keep]

def check_crossover(df, symbol, timeframe, exchange_name):
    """
    ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ OBV ‡¶è‡¶¨‡¶Ç MA_OBV_30 ‡¶ï‡ßç‡¶∞‡¶∏‡¶ì‡¶≠‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç Pre-Cross ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá‡•§
    """
    
    if len(df) < 2:
        return False
        
    last = df.iloc[-1]
    prev = df.iloc[-2]
    
    # 1. ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™: ‡¶•‡ßç‡¶∞‡ßá‡¶∂‡¶π‡ßã‡¶≤‡ßç‡¶° 0.1% ‡¶è ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã (0.001)
    PRE_CROSS_THRESHOLD = 0.001 
    
    obv_value = last['OBV']
    ma_value = last['MA_OBV_30']
    
    alert_title_base = f"[{symbol} - {timeframe} ({exchange_name})]"
    
    # 2. Hard Crossover (‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡ßç‡¶∞‡¶∏‡¶ì‡¶≠‡¶æ‡¶∞) ‡¶≤‡¶ú‡¶ø‡¶ï:
    if prev['OBV'] < prev['MA_OBV_30'] and obv_value > ma_value:
        alert_body = f"üöÄ Bullish Crossover (‡¶ï‡ßç‡¶∞‡¶∏ ‡¶Ü‡¶™)! ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶¨‡¶£‡¶§‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®! OBV:{obv_value:,.2f}, MA:{ma_value:,.2f}"
        send_pushbullet_notification(f"‚úÖ BUY SIGNAL {alert_title_base}", alert_body)
        return True

    elif prev['OBV'] > prev['MA_OBV_30'] and obv_value < ma_value:
        alert_body = f"üìâ Bearish Crossover (‡¶ï‡ßç‡¶∞‡¶∏ ‡¶°‡¶æ‡¶â‡¶®)! ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶¨‡¶£‡¶§‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®! OBV:{obv_value:,.2f}, MA:{ma_value:,.2f}"
        send_pushbullet_notification(f"‚ùå SELL SIGNAL {alert_title_base}", alert_body)
        return True
        
    # 3. Pre-Cross (‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ) ‡¶≤‡¶ú‡¶ø‡¶ï:
    if abs(ma_value) > 1: 
        
        # ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨ ‡¶ó‡¶£‡¶®‡¶æ (‡¶∂‡¶§‡¶æ‡¶Ç‡¶∂‡ßá):
        difference = abs(obv_value - ma_value)
        distance_percent = difference / abs(ma_value)
        
        # ‡¶Ø‡¶¶‡¶ø ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨ 0.1% ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶•‡¶æ‡¶ï‡ßá
        if distance_percent <= PRE_CROSS_THRESHOLD:
            
            # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶∏‡¶≤ ‡¶ï‡ßç‡¶∞‡¶∏‡¶ì‡¶≠‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶π‡ßü
            alert_body = (
                f"‚ö†Ô∏è Pre-Cross Warning: OBV MA-‡¶è‡¶∞ ‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø! ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨: {distance_percent:.2%}\n"
                f"OBV:{obv_value:,.2f}, MA:{ma_value:,.2f}"
            )
            send_pushbullet_notification(f"‚ö†Ô∏è PRE-CROSS {alert_title_base}", alert_body)
            return True
        
    return False

def main():
    
    # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡ßç‡¶∏‡¶ö‡ßá‡¶û‡ßç‡¶ú‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
    EXCHANGES_TO_CHECK = [
        ccxt.mexc(),    
        ccxt.kucoin(), 
    ]
    
    print(f"‡¶ü‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶Ç ‡¶™‡ßá‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶∏: {SYMBOL_PAIRS}, ‡¶ü‡¶æ‡¶á‡¶Æ‡¶´‡ßç‡¶∞‡ßá‡¶Æ: {TIMEFRAMES}")
    
    # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶è‡¶ï‡ßç‡¶∏‡¶ö‡ßá‡¶û‡ßç‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
    for exchange in EXCHANGES_TO_CHECK:
        exchange_name = exchange.id
        print(f"\n--- {exchange_name.upper()} ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ---")
        
        try:
            
            for symbol in SYMBOL_PAIRS:
                for tf in TIMEFRAMES:
                    try:
                        # ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü=200 ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                        ohlcv = exchange.fetch_ohlcv(symbol, tf, limit=200) 
                        
                        if not ohlcv:
                            print(f"‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡ßá‡¶á: {symbol} {tf} ({exchange_name})")
                            continue
                            
                        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                        
                        df = calculate_obv_ma(df)
                        
                        # NaN ‡¶´‡¶ø‡¶ï‡ßç‡¶∏: NaN ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                        df.dropna(inplace=True) 
                        
                        if len(df) < 2:
                            continue
                            
                        # ‡¶ï‡ßç‡¶∞‡¶∏‡¶ì‡¶≠‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
                        check_crossover(df, symbol, tf, exchange_name.upper()) 
                        
                        time.sleep(0.5) 
                        
                    except Exception as e:
                        # ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡ßá‡ßü‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø
                        print(f"‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶¨‡¶æ API ‡¶ï‡¶≤ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({symbol} {tf} - {exchange_name.upper()}): {e}")

        except Exception as e:
            # ‡¶è‡¶ï‡ßç‡¶∏‡¶ö‡ßá‡¶û‡ßç‡¶ú ‡¶∏‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø
            print(f"‡¶è‡¶ï‡ßç‡¶∏‡¶ö‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ({exchange_name.upper()}): {e}")
            continue # ‡¶è‡¶á ‡¶è‡¶ï‡ßç‡¶∏‡¶ö‡ßá‡¶û‡ßç‡¶ú ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá ‡¶™‡¶∞‡ßá‡¶∞‡¶ü‡¶ø ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
            
if __name__ == "__main__":
    main()
